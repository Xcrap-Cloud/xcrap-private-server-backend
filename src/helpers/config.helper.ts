import {
    HtmlParsingModel,
    JsonParsingModel,
    MarkdownParsingModel,
    extractClassList,
    extractClassNames,
    extractHref,
    extractInnerText,
    extractSrc,
    extractTextContent,
    extractAllData,
    extractAriaChecked,
    extractAriaDisabled,
    extractAriaExpanded,
    extractAriaHidden,
    extractAriaLabel,
    extarctAttributes,
    extractAttribute,
    extarctRawAttributes,
    extractAttrs,
    extractAutocomplete,
    extractChecked,
    extractChildElementCount,
    extractDisabled,
    extractId,
    extractInnerHtml,
    extractLocalName,
    extractMaxLength,
    extractMinLength,
    extractName,
    extractNodeType,
    extractOuterHtml,
    extractPattern,
    extractPlaceholder,
    extractRange,
    extractRawAttrs,
    extractRawTagName,
    extractRawText,
    extractReadonly,
    extractRequired,
    extractText,
    extractRole,
    extractSelected,
    extractStructure,
    extractStructuredText,
    extractStyle,
    extractTagName,
    extractTitle,
    extractType,
    extractValue,
    HtmlParser,
    JsonParser,
    MarkdownParser,
} from "@xcrap/parser"
import { CreateClientConfig, CreateParsingModelConfig } from "@xcrap/factory"
import { GotScrapingClient } from "@xcrap/got-scraping-client"
import { AxiosClient } from "@xcrap/axios-client"
import { ValidationPipe } from "@nestjs/common"
import { HttpClient } from "@xcrap/core"
import * as dotenv from "dotenv"

dotenv.config({ quiet: true })

const isProduction = process.env.NODE_ENV === "production"

const configHelper = {
    isProduction: isProduction,
    isDevelopment: !isProduction,
    app: {
        metadata: {
            name: "Bolierplate",
            version: "0.0.1",
        },
        port: process.env.PORT || 3003,
        validationPipe: new ValidationPipe({
            whitelist: true,
            forbidNonWhitelisted: true,
            transform: true,
        }),
        cors: {
            methods: "GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS",
            origin: process.env.CORS_ORIGIN || true,
            credentials: true,
        },
    },
    pagination: {
        minPage: 1,
        defaultPage: 1,
        minPerPage: 2,
        defaultPerPage: 20,
        maxPerPage: 50,
    },
    users: {
        apiKey: {
            prefix: "xcloud_",
            randomCharsLength: 32,
        },
        minNameLength: 3,
        maxNameLength: 100,
        minUsernameLength: 4,
        maxUsernameLength: 16,
        maxEmailLength: 150,
        generatedUsernameLength: 8,
    },
    scrapers: {
        parsers: {
            html: HtmlParser,
            json: JsonParser,
            markdown: MarkdownParser,
        },
    },
    factory: {
        createParsingModelConfig: {
            allowedExtractors: {
                innerText: extractInnerText,
                textContent: extractTextContent,
                href: extractHref,
                classList: extractClassList,
                classNames: extractClassNames,
                src: extractSrc,
                ariaLabel: extractAriaLabel,
                ariaHidden: extractAriaHidden,
                ariaChecked: extractAriaChecked,
                ariaExpanded: extractAriaExpanded,
                ariaDisabled: extractAriaDisabled,
                attrs: extractAttrs,
                attributes: extarctAttributes,
                rawAttrs: extractRawAttrs,
                rawAttributes: extarctRawAttributes,
                rawText: extractRawText,
                outerHtml: extractOuterHtml,
                innerHtml: extractInnerHtml,
                tagName: extractTagName,
                rawTagName: extractRawTagName,
                id: extractId,
                type: extractType,
                role: extractRole,
                name: extractName,
                placeholder: extractPlaceholder,
                title: extractTitle,
                value: extractValue,
                checked: extractChecked,
                disabled: extractDisabled,
                readonly: extractReadonly,
                required: extractRequired,
                selected: extractSelected,
                nodeType: extractNodeType,
                localName: extractLocalName,
                autocomplete: extractAutocomplete,
                maxLength: extractMaxLength,
                minLength: extractMinLength,
                childElementCount: extractChildElementCount,
                pattern: extractPattern,
                style: extractStyle,
                text: extractText,
                structure: extractStructure,
                structuredText: extractStructuredText,
                data: extractAllData,
                attribute: extractAttribute<any>,
                range: extractRange,
                content: extractAttribute("content"),
            },
            allowedModels: {
                html: HtmlParsingModel,
                json: JsonParsingModel,
                markdown: MarkdownParsingModel,
            },
            extractorArgumentSeparator: ":",
        } satisfies CreateParsingModelConfig,
        createClientConfig: {
            allowedClients: {
                got_scraping: GotScrapingClient,
                axios: AxiosClient,
                http_core: HttpClient,
            },
        } satisfies CreateClientConfig<any>,
    },
}

export default configHelper
